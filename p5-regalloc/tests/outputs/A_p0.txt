fact:
  push BP
  i2i SP => BP
  addI SP, -16 => SP
  loadI 1 => R0
  storeAI R0 => [BP-8]
  loadI 1 => R0
  storeAI R0 => [BP-16]
l1:
  loadAI [BP-8] => R0
  loadAI [BP+16] => R1
  loadI 1 => R2
  add R1, R2 => R1
  cmp_LT R0, R1 => R0
  cbr R0 => l2, l3
l2:
  loadAI [BP-16] => R0
  loadAI [BP-8] => R1
  mult R0, R1 => R0
  storeAI R0 => [BP-16]
  loadAI [BP-8] => R0
  loadI 1 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-8]
  jump l1
l3:
  loadAI [BP-16] => R0
  i2i R0 => RET
  jump l0
l0:
  i2i BP => SP
  pop BP
  return
fib:
  push BP
  i2i SP => BP
  addI SP, -8 => SP
  loadAI [BP+16] => R0
  loadI 1 => R1
  cmp_LE R0, R1 => R0
  cbr R0 => l5, l6
l5:
  loadAI [BP+16] => R0
  i2i R0 => RET
  jump l4
l6:
  loadAI [BP+16] => R0
  loadI 1 => R1
  sub R0, R1 => R0
  push R0
  call fib
  addI SP, 8 => SP
  i2i RET => R0
  loadAI [BP+16] => R1
  loadI 2 => R2
  sub R1, R2 => R1
  push R1
  storeAI R0 => [BP-8]
  call fib
  addI SP, 8 => SP
  i2i RET => R0
  loadAI [BP-8] => R1
  add R1, R0 => R0
  i2i R0 => RET
  jump l4
l4:
  i2i BP => SP
  pop BP
  return
is_prime:
  push BP
  i2i SP => BP
  addI SP, -8 => SP
  loadI 2 => R0
  storeAI R0 => [BP-8]
  loadAI [BP+16] => R0
  loadI 1 => R1
  cmp_LE R0, R1 => R0
  cbr R0 => l8, l9
l8:
  loadI 0 => R0
  i2i R0 => RET
  jump l7
l9:
l10:
  loadAI [BP-8] => R0
  loadAI [BP-8] => R1
  mult R0, R1 => R0
  loadAI [BP+16] => R1
  cmp_LE R0, R1 => R0
  cbr R0 => l11, l12
l11:
  loadAI [BP+16] => R0
  loadAI [BP-8] => R1
  div R0, R1 => R2
  mult R1, R2 => R1
  sub R0, R1 => R0
  loadI 0 => R1
  cmp_EQ R0, R1 => R0
  cbr R0 => l13, l14
l13:
  loadI 0 => R0
  i2i R0 => RET
  jump l7
l14:
  loadAI [BP-8] => R0
  loadI 1 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-8]
  jump l10
l12:
  loadI 1 => R0
  i2i R0 => RET
  jump l7
l7:
  i2i BP => SP
  pop BP
  return
gcd:
  push BP
  i2i SP => BP
  addI SP, -8 => SP
  loadAI [BP+16] => R0
  loadAI [BP+24] => R1
  cmp_LT R0, R1 => R0
  cbr R0 => l16, l17
l16:
  loadAI [BP+16] => R0
  storeAI R0 => [BP-8]
  jump l18
l17:
  loadAI [BP+24] => R0
  storeAI R0 => [BP-8]
l18:
l19:
  loadAI [BP-8] => R0
  loadI 0 => R1
  cmp_GT R0, R1 => R0
  cbr R0 => l20, l21
l20:
  loadAI [BP+16] => R0
  loadAI [BP-8] => R1
  div R0, R1 => R2
  mult R1, R2 => R1
  sub R0, R1 => R0
  loadI 0 => R1
  cmp_EQ R0, R1 => R0
  loadAI [BP+24] => R1
  loadAI [BP-8] => R2
  div R1, R2 => R3
  mult R2, R3 => R2
  sub R1, R2 => R1
  loadI 0 => R2
  cmp_EQ R1, R2 => R1
  and R0, R1 => R0
  cbr R0 => l22, l23
l22:
  jump l21
l23:
  loadAI [BP-8] => R0
  loadI 1 => R1
  sub R0, R1 => R0
  storeAI R0 => [BP-8]
  jump l19
l21:
  loadAI [BP-8] => R0
  i2i R0 => RET
  jump l15
l15:
  i2i BP => SP
  pop BP
  return
sum_nums:
  push BP
  i2i SP => BP
  addI SP, -16 => SP
  loadI 0 => R0
  storeAI R0 => [BP-8]
  loadI 0 => R0
  storeAI R0 => [BP-16]
  loadAI [BP+16] => R0
  loadI 0 => R1
  cmp_EQ R0, R1 => R0
  cbr R0 => l25, l26
l25:
  loadI 0 => R0
  i2i R0 => RET
  jump l24
l26:
l27:
  loadAI [BP-8] => R0
  loadAI [BP+16] => R1
  cmp_LT R0, R1 => R0
  cbr R0 => l28, l29
l28:
  loadAI [BP-16] => R0
  loadI 256 => R1
  loadAI [BP-8] => R2
  multI R2, 8 => R2
  loadAO [R1+R2] => R1
  add R0, R1 => R0
  storeAI R0 => [BP-16]
  loadAI [BP-8] => R0
  loadI 1 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-8]
  jump l27
l29:
  loadAI [BP-16] => R0
  i2i R0 => RET
  jump l24
l24:
  i2i BP => SP
  pop BP
  return
sort_nums:
  push BP
  i2i SP => BP
  addI SP, -24 => SP
  loadI 0 => R0
  storeAI R0 => [BP-8]
l31:
  loadAI [BP-8] => R0
  loadAI [BP+16] => R1
  cmp_LT R0, R1 => R0
  cbr R0 => l32, l33
l32:
  loadI 0 => R0
  storeAI R0 => [BP-16]
l34:
  loadAI [BP-16] => R0
  loadAI [BP+16] => R1
  loadI 1 => R2
  sub R1, R2 => R1
  loadAI [BP-8] => R2
  sub R1, R2 => R1
  cmp_LT R0, R1 => R0
  cbr R0 => l35, l36
l35:
  loadI 256 => R0
  loadAI [BP-16] => R1
  multI R1, 8 => R1
  loadAO [R0+R1] => R0
  loadI 256 => R1
  loadAI [BP-16] => R2
  loadI 1 => R3
  add R2, R3 => R2
  multI R2, 8 => R2
  loadAO [R1+R2] => R1
  cmp_GT R0, R1 => R0
  cbr R0 => l37, l38
l37:
  loadI 256 => R0
  loadAI [BP-16] => R1
  multI R1, 8 => R1
  loadAO [R0+R1] => R0
  storeAI R0 => [BP-24]
  loadAI [BP-16] => R0
  loadI 256 => R1
  loadAI [BP-16] => R2
  loadI 1 => R3
  add R2, R3 => R2
  multI R2, 8 => R2
  loadAO [R1+R2] => R1
  loadI 256 => R2
  multI R0, 8 => R0
  storeAO R1 => [R2+R0]
  loadAI [BP-16] => R0
  loadI 1 => R1
  add R0, R1 => R0
  loadAI [BP-24] => R1
  loadI 256 => R2
  multI R0, 8 => R0
  storeAO R1 => [R2+R0]
l38:
  loadAI [BP-16] => R0
  loadI 1 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-16]
  jump l34
l36:
  loadAI [BP-8] => R0
  loadI 1 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-8]
  jump l31
l33:
l30:
  i2i BP => SP
  pop BP
  return
draw_triangle:
  push BP
  i2i SP => BP
  addI SP, -48 => SP
  loadI 1 => R0
  storeAI R0 => [BP-16]
l40:
  loadAI [BP-16] => R0
  loadAI [BP+16] => R1
  cmp_LE R0, R1 => R0
  cbr R0 => l41, l42
l41:
  loadAI [BP+16] => R0
  loadAI [BP-16] => R1
  sub R0, R1 => R0
  loadI 2 => R1
  div R0, R1 => R0
  storeAI R0 => [BP-24]
  loadAI [BP-16] => R0
  storeAI R0 => [BP-32]
  loadI 0 => R0
  storeAI R0 => [BP-40]
  loadI 0 => R0
  storeAI R0 => [BP-48]
l43:
  loadAI [BP-40] => R0
  loadAI [BP-24] => R1
  cmp_LT R0, R1 => R0
  cbr R0 => l44, l45
l44:
  print \" \"
  loadAI [BP-40] => R0
  loadI 1 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-40]
  jump l43
l45:
l46:
  loadAI [BP-48] => R0
  loadAI [BP-32] => R1
  cmp_LT R0, R1 => R0
  cbr R0 => l47, l48
l47:
  print \"#\"
  loadAI [BP-48] => R0
  loadI 1 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-48]
  jump l46
l48:
  print \"\\n\"
  loadAI [BP-16] => R0
  loadI 2 => R1
  add R0, R1 => R0
  storeAI R0 => [BP-16]
  jump l40
l42:
l39:
  i2i BP => SP
  pop BP
  return
main:
  push BP
  i2i SP => BP
  addI SP, 0 => SP
  loadI 0 => R0
  i2i R0 => RET
  jump l49
l49:
  i2i BP => SP
  pop BP
  return
RETURN VALUE = 0
